
To calculate a ^ b in log2(b) time complexity

how do we calculate 3 ^ 19

res = 1
i <- 1 to 19:
	res *= 3

No of operations : 19
--------------------------

res = 1
to cal: 3 ^ 19



1 - res = 1 * 3
    to cal: 3 ^ 18 = (3 ^ 2) ^ 9 = 9 ^ 9

2 - res = 3 * 9
    to cal: 9 ^ 8 = (9 ^ 2) ^ 4 = (81 ^ 4)

3 - res = 3 * 9
    to cal: 65651 ^ 2

4 - res = 3 * 9
    to cal: 43046721 ^ 1

5 - res = 3 * 9 * 43046721

No of operations : 5
-----------------------------

Let's actually realize the efficiency of this algo

let's say we have to calculate 2 ^ (1e18)

2^60 = 1e18

operations required by naive method: 1e18
approx time to perform this: 1e18 / 1e8 = 1e10 seconds = 321 years

operations required by binary exponentiation: log(1e18) = 60
approx time to perform this: 60 / 1e8 = 0.0000006 seconds

long long power(int a, int b){
    long long res = 1;
    while(b > 0) {
    	// if b is odd, multiply a to the result
        if(b % 2 == 1) {
            res = res * a;
            b--;
        }

        // b is even now
        // a ^ b = (a ^ 2) ^ (b / 2)
        a = a * a;
        b /= 2;
    }
    return res;
}

long long power(int a, int b, int mod){
    long long res = 1;
    while(b > 0) {
    	// if b is odd, multiply it to the result
        if(b % 2 == 1) {
            res = (res * a) % mod;
            b--;
        }

        // b is even now
        // a ^ b = (a ^ 2) * (b / 2)
        a = 1ll * a * a % mod;
        b /= 2;
    }
    return res;
}

practice problem :- 
http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=3671

#include<bits/stdc++.h>
using namespace std;

long long power(int a, int b, int mod){
    long long res = 1;
    while(b > 0) {
    	// if b is odd, multiply it to the result
        if(b % 2 == 1) {
            res = res * a % mod;
            b--;
        }

        // b is even now
        // a ^ b = (a ^ 2) * (b / 2)
        a = 1ll * a * a % mod;
        b /= 2;
    }
    return res;
}


int main() {
	int t;
	cin >> t;
	while(t--) {
		int x, y, mod;
		cin >> x >> y >> mod;
		cout << power(x, y, mod) << '\n';
	}
}